import json
import os
import re
import logging
import streamlit as st
from googleapiclient.discovery import build
from google.oauth2 import service_account
from google.generativeai import GenerativeModel, configure
from google.api_core.exceptions import GoogleAPIError
import boto3
from transformers import BertTokenizer, BertForSequenceClassification
import torch

# Configuration de la journalisation
logging.basicConfig(filename="app.log", level=logging.INFO, format="%(asctime)s - %(message)s")

# Charger le mod√®le et le tokenizer BERT pr√©-entra√Æn√©s
tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")
model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=3)  # 3 classes : client, company, comparison

# Fonction pour classifier la question
def classify_question_with_bert(question):
    """Classifie la question en utilisant un mod√®le BERT pr√©-entra√Æn√©."""
    inputs = tokenizer(question, return_tensors="pt", truncation=True, padding=True, max_length=512)
    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits
    predicted_class = torch.argmax(logits, dim=1).item()
    classes = ["client", "company", "comparison"]
    return classes[predicted_class]

# Fonction pour demander le feedback utilisateur
def ask_user_feedback(question, predicted_class):
    """Demande √† l'utilisateur de confirmer ou de corriger la classification."""
    st.write(f"Question : {question}")
    st.write(f"Classification pr√©dite : {predicted_class}")
    feedback = st.radio("La classification est-elle correcte ?", ["Oui", "Non"])
    if feedback == "Non":
        corrected_class = st.selectbox("Corriger la classification :", ["client", "company", "comparison"])
        return corrected_class
    return predicted_class

# Fonction pour journaliser les erreurs
def log_classification_error(question, predicted_class, corrected_class):
    """Journalise les erreurs de classification."""
    log_message = f"Question : {question} | Pr√©diction : {predicted_class} | Correction : {corrected_class}"
    logging.info(log_message)

# Initialiser l'√©tat de la session
def initialize_session_state():
    """Initialise l'√©tat de la session."""
    if "history" not in st.session_state:
        st.session_state.history = []
    if "docs_text" not in st.session_state:
        st.session_state.docs_text = ""
    if "client_docs_text" not in st.session_state:
        st.session_state.client_docs_text = ""

# Interroger Gemini avec l'historique des interactions
def query_gemini_with_history(docs_text, client_docs_text, user_question, history, model="gemini-2.0-flash-exp"):
    """Interroge Gemini avec l'historique des interactions."""
    try:
        history_str = "\n".join([f"Q: {h['question']}\nR: {h['response']}" for h in history[-5:]])  # Limiter l'historique
        prompt = f"""
Introduction et contexte :
Tu es ü§ñ Assurbotü§ñ , un assistant en assurance automobile entra√Æn√© et cr√©√© par DJEGUI WAGUE. Ton objectif est de fournir des analyses claires, pr√©cises et structur√©es, tout en continuant √† apprendre pour devenir un expert dans ce domaine.
Voici l'historique des conversations pr√©c√©dentes :
{history_str}

Voici les contenus extraits des documents clients :
{client_docs_text}

Voici les contenus des documents Google Docs :
{docs_text}

Question : {user_question}
"""
        model = GenerativeModel(model_name=model)
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        return f"Erreur lors de l'interrogation de Gemini : {e}"

# Lister les fichiers dans un dossier Google Drive
def list_files_in_folder(folder_id, drive_service):
    """Liste les fichiers dans un dossier Google Drive."""
    try:
        results = drive_service.files().list(
            q=f"'{folder_id}' in parents",
            fields="files(id, name, mimeType)"
        ).execute()
        return results.get("files", [])
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des fichiers : {e}")
        return []

# Extraire le texte d'un document Google Docs
def get_google_doc_text(doc_id, docs_service):
    """Extrait le texte d'un document Google Docs."""
    try:
        document = docs_service.documents().get(documentId=doc_id).execute()
        text_content = ""
        for element in document.get("body", {}).get("content", []):
            if "paragraph" in element:
                for text_run in element.get("paragraph", {}).get("elements", []):
                    if "textRun" in text_run:
                        text_content += text_run["textRun"]["content"]
        return text_content.strip()
    except Exception as e:
        return f"Erreur lors de la lecture du document Google Docs : {e}"

# Charger les documents depuis plusieurs dossiers Google Drive
def load_documents(folder_ids, drive_service, docs_service):
    """Charge les documents depuis plusieurs dossiers Google Drive."""
    if not st.session_state.docs_text:
        docs_text = ""
        for folder_id in folder_ids:
            files = list_files_in_folder(folder_id, drive_service)
            if files:
                st.write(f"Compagnies d√©tect√©s üòä‚ú®üïµÔ∏è")
                for file in files:
                    if file["mimeType"] == "application/vnd.google-apps.document":
                        doc_text = get_google_doc_text(file["id"], docs_service)
                        docs_text += f"\n\n---\n\n{doc_text}"
                    else:
                        st.warning(f"Type de fichier non pris en charge : {file['name']}")
            else:
                st.warning(f"Aucun fichier trouv√© dans le dossier {folder_id}.")
        if docs_text:
            st.session_state.docs_text = docs_text
            st.success("Service validation‚úÖ.")

# Fonction pour extraire le texte avec Amazon Textract
def extract_text_with_textract(file_bytes):
    """Extrait le texte d'un fichier avec Amazon Textract."""
    try:
        textract_client = boto3.client(
            "textract",
            aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
            aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
            region_name=os.getenv("AWS_REGION", "eu-central-1"),
        )
        response = textract_client.detect_document_text(Document={"Bytes": file_bytes})
        text = ""
        for item in response["Blocks"]:
            if item["BlockType"] == "LINE":
                text += item["Text"] + "\n"
        return text.strip()
    except Exception as e:
        return f"Erreur lors de l'extraction du texte avec Textract : {e}"

# Interface utilisateur
def main():
    """Fonction principale pour l'interface utilisateur."""
    st.markdown(
        """
        <style>
        .stButton button {
            background-color: #4CAF50;
            color: white;
            border-radius: 12px;
            padding: 12px 24px;
            font-size: 16px;
            font-weight: bold;
            border: none;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .stButton button:hover {
            background-color: #45a049;
            transform: scale(1.05);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        }
        .stButton button:active {
            background-color: #367c39;
            transform: scale(0.95);
        }
        .stTextInput input {
            border-radius: 12px;
            padding: 12px;
            border: 1px solid #ccc;
            font-size: 16px;
            transition: all 0.3s ease;
            background-color: #f9f9f9;
        }
        .stTextInput input:focus {
            border-color: #4CAF50;
            box-shadow: 0 0 8px rgba(76, 175, 80, 0.5);
            outline: none;
            background-color: white;
        }
        .centered-title {
            text-align: center;
            font-size: 42px;
            font-weight: bold;
            color: #2E86C1;
            margin-bottom: 20px;
            transition: all 0.3s ease;
        }
        .centered-title:hover {
            color: #1c5a7a;
            transform: scale(1.02);
        }
        .centered-text {
            text-align: center;
            font-size: 18px;
            color: #4CAF50;
            margin-bottom: 30px;
            transition: all 0.3s ease;
        }
        .centered-text:hover {
            color: #367c39;
        }
        .stApp {
            background: linear-gradient(135deg, #f0f2f6, #e6f7ff);
            padding: 20px;
        }
        .stSuccess {
            background-color: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 12px;
            border: 1px solid #c3e6cb;
            margin-bottom: 20px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .stSuccess:hover {
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
            transform: translateY(-2px);
        }
        .stError {
            background-color: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 12px;
            border: 1px solid #f5c6cb;
            margin-bottom: 20px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .stError:hover {
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
            transform: translateY(-2px);
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

    initialize_session_state()

    st.title("üöó Assistant Courtier en Assurance Auto")

    # Initialisation des services Google
    SCOPES = [
        "https://www.googleapis.com/auth/drive.readonly",
        "https://www.googleapis.com/auth/documents.readonly",
    ]
    SERVICE_ACCOUNT_JSON = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS_JSON")
    GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

    if not SERVICE_ACCOUNT_JSON:
        st.error("La variable d'environnement 'GOOGLE_APPLICATION_CREDENTIALS_JSON' est manquante ou vide.")
        st.stop()

    try:
        google_credentials = json.loads(SERVICE_ACCOUNT_JSON)
        credentials = service_account.Credentials.from_service_account_info(google_credentials, scopes=SCOPES)
        drive_service = build("drive", "v3", credentials=credentials)
        docs_service = build("docs", "v1", credentials=credentials)
        configure(api_key=GEMINI_API_KEY)  # Initialiser Gemini
        st.success("ü§ñ Assurbot initialis√© üöÄ avec succ√®s !")
    except json.JSONDecodeError:
        st.error("Le contenu de la variable 'GOOGLE_APPLICATION_CREDENTIALS_JSON' n'est pas un JSON valide.")
        st.stop()
    except Exception as e:
        st.error(f"Erreur lors de l'initialisation des services Google : {e}")
        st.stop()

    folder_ids = os.environ.get("GOOGLE_DRIVE_FOLDER_ID", "").split(",")
    folder_ids = [folder_id.strip() for folder_id in folder_ids if folder_id.strip()]
    if not folder_ids:
        st.error("La variable d'environnement 'GOOGLE_DRIVE_FOLDER_ID' n'est pas d√©finie ou est vide.")
        st.stop()

    load_documents(folder_ids, drive_service, docs_service)

    # Section pour t√©l√©verser les documents clients
    st.header("üìÑ T√©l√©versez les documents des clients")
    uploaded_files = st.file_uploader(
        "Glissez-d√©posez les documents des clients (images ou PDF)", type=["jpg", "jpeg", "png", "pdf"], accept_multiple_files=True
    )

    if uploaded_files:
        client_docs_text = ""
        for uploaded_file in uploaded_files:
            st.write(f"### Fichier : {uploaded_file.name}")
            
            # Extraire le texte avec Amazon Textract
            file_bytes = uploaded_file.read()
            extracted_text = extract_text_with_textract(file_bytes)
            client_docs_text += f"\n\n---\n\n{extracted_text}"
            st.text_area("Texte extrait", extracted_text, height=200, key=uploaded_file.name)
        
        st.session_state.client_docs_text = client_docs_text

    # Section pour poser des questions
    st.header("‚ùì Posez une question sur les documents")
    user_question = st.text_input("Entrez votre question ici")
    if st.button("Envoyer la question"):
        # Classifier la question
        predicted_class = classify_question_with_bert(user_question)
        final_class = ask_user_feedback(user_question, predicted_class)
        
        # Journaliser les erreurs
        if final_class != predicted_class:
            log_classification_error(user_question, predicted_class, final_class)
        
        # Adapter les documents en fonction de la classification
        if final_class == "client":
            docs_text = ""  # Ne pas utiliser les documents des compagnies
        elif final_class == "company":
            client_docs_text = ""  # Ne pas utiliser les documents clients
        else:  # "comparison" ou "both"
            pass  # Utiliser les deux types de documents
        
        with st.spinner("Interrogation ü§ñAssurbot..."):
            response = query_gemini_with_history(
                st.session_state.docs_text,  # Documents Google Docs
                st.session_state.client_docs_text,  # Documents clients t√©l√©vers√©s
                user_question,
                st.session_state.history
            )
        st.session_state.history.insert(0, {"question": user_question, "response": response})

    if st.session_state.history:
        with st.expander("üìú Historique des interactions", expanded=True):
            for interaction in st.session_state.history:
                st.markdown(f"**Question :** {interaction['question']}")
                st.markdown(f"**R√©ponse :** {interaction['response']}")
                st.markdown("---")

    st.markdown("---")
    st.markdown("¬© 2023 Assistant Assurance Auto. Tous droits r√©serv√©s.")

if __name__ == "__main__":
    main()
